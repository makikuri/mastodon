version: '3'
services:

  db_backend:
    restart: always
    shm_size: 256mb
    build:
      context: .
      # Deleting DB-free space at non-stop instance by pg_repack
      dockerfile: Dockerfile.postgres
    networks:
      - internal_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
    volumes:
      - ./postgres:/var/lib/postgresql/data

# If you use pgbouncer, uncomment.
#  db:
#    restart: always
#    image: pgbouncer/pgbouncer
#    networks:
#     - internal_network      
#    environment:
#      DATABASES_HOST: db_backend
#      DATABASES_USER: mastodon
#      DATABASES_DBNAME: mastodon
#      DATABASES_PASSWORD: yourpassword
#      DATABASES_PORT: 5432
#      #PGBOUNCER_LOGFILE: /var/log/pgbouncer/pgbouncer.log
#      #PGBOUNCER_PIDFILE: /var/run/pgbouncer/pgbouncer.pid
#      #PGBOUNCER_LISTEN_ADDR: 127.0.0.1
#      PGBOUNCER_LISTEN_PORT: 6432
#      #PGBOUNCER_UNIX_SOCKET_DIR: /var/run/postgresql
#      PGBOUNCER_AUTH_TYPE: md5
#      PGBOUNCER_AUTH_FILE: /etc/pgbouncer/userlist.txt
#      PGBOUNCER_ADMIN_USERS: pgbouncer
#      PGBOUNCER_DEFAULT_POOL_SIZE: 20
#      PGBOUNCER_RESERVE_POOL_SIZE: 3
#      PGBOUNCER_MAX_CLIENT_CONN: 2048
#      PGBOUNCER_POOL_MODE: transaction
#      PGBOUNCER_SERVER_IDLE_TIMEOUT: 30
#   volumes:
#     - ./pgbouncer:/etc/pgbouncer
#   ports:
#     - "127.0.0.1:6432:6432"
#   depends_on:
#     - db_backend
#   healthcheck:
#     test: ps aux | grep -v grep | grep pgbouncer

  redis:
    restart: always
    image: redis:6.0-alpine
    networks:
      - internal_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    volumes:
      - ./redis:/data

#  es:
#    restart: always
#    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.10
#    environment:
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#      - "cluster.name=es-mastodon"
#      - "discovery.type=single-node"
#      - "bootstrap.memory_lock=true"
#    networks:
#      - internal_network
#    healthcheck:
#      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
#    volumes:
#      - ./elasticsearch:/usr/share/elasticsearch/data
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1

  web:
    build: .
    image: tootsuite/mastodon
    restart: always
    env_file: .env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    networks:
      - external_network
      - internal_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:3000/health || exit 1"]
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      - db_backend    
#      - db
      - redis
#      - es
    volumes:
      - ./public/system:/mastodon/public/system

  streaming:
    build: .
    image: tootsuite/mastodon
    restart: always
    env_file: .env.production
    command: node ./streaming
    networks:
      - external_network
      - internal_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1"]
    ports:
      - "127.0.0.1:4000:4000"
    depends_on:
      - db_backend    
#      - db
      - redis

  sidekiq:
    build: .
    image: tootsuite/mastodon
    restart: always
    env_file: .env.production
    command: bundle exec sidekiq
    depends_on:
      - db_backend    
#      - db
      - redis
    networks:
      - external_network
      - internal_network
    volumes:
      - ./public/system:/mastodon/public/system
## Uncomment to enable federation with tor instances along with adding the following ENV variables
## http_proxy=http://privoxy:8118
## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true
#  tor:
#    image: sirboops/tor
#    networks:
#      - external_network
#      - internal_network
#
#  privoxy:
#    image: sirboops/privoxy
#    volumes:
#      - ./priv-config:/opt/config
#    networks:
#      - external_network
#      - internal_network

## If you want to run the docker on a local, uncomment.
  nginx:
    build:
      context: .
      dockerfile: local/Dockerfile.nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - streaming
    networks:
      - external_network
      - internal_network
    volumes:
      - ./local/letsencrypt:/etc/letsencrypt:ro
      - ./local/sites-available:/etc/nginx/sites-available:ro

networks:
  external_network:
  internal_network:
    internal: true
